input:
    input.go: |
        package fmtfunc

        import "database/sql"

        // goverter:converter
        // goverter:output:format function
        // goverter:extend SQLStringToPString
        type Converter interface {
            // goverter:map Owner.Name OwnerName
            ConvertApartment(source DBApartment) APIApartment
            // goverter:map Name FirstName
            // goverter:ignore Age
            ConvertPerson(source DBPerson) APIPerson
        }

        func SQLStringToPString(value sql.NullString) *string {
            if value.Valid {
                return &value.String
            }
            return nil
        }

        type DBHouse struct {
            Address    string
            Apartments []DBApartment
        }

        type DBApartment struct {
            Position   uint
            Owner      DBPerson
            CoResident []DBPerson
        }

        type DBPerson struct {
            ID         int
            Name       string
            MiddleName sql.NullString
            Friends    []DBPerson
            Info       Info
        }

        type APIHouse struct {
            Address    string
            Apartments map[uint]APIApartment
        }

        type APIApartment struct {
            Position   uint
            Owner      APIPerson
            OwnerName  string
            CoResident []APIPerson
        }

        type APIPerson struct {
            ID         int
            MiddleName *string
            FirstName  *string
            Friends    []APIPerson
            Info       Info
            Age        int
        }

        type Info struct {
            Birthplace string
        }
success:
    - generated/generated.go: |
        // Code generated by github.com/jmattheis/goverter, DO NOT EDIT.

        package generated

        import execution "github.com/jmattheis/goverter/execution"

        func ConvertApartment(source execution.DBApartment) execution.APIApartment {
        	var fmtfuncAPIApartment execution.APIApartment
        	fmtfuncAPIApartment.Position = source.Position
        	fmtfuncAPIApartment.Owner = ConvertPerson(source.Owner)
        	fmtfuncAPIApartment.OwnerName = source.Owner.Name
        	if source.CoResident != nil {
        		fmtfuncAPIApartment.CoResident = make([]execution.APIPerson, len(source.CoResident))
        		for i := 0; i < len(source.CoResident); i++ {
        			fmtfuncAPIApartment.CoResident[i] = ConvertPerson(source.CoResident[i])
        		}
        	}
        	return fmtfuncAPIApartment
        }
        func ConvertPerson(source execution.DBPerson) execution.APIPerson {
        	var fmtfuncAPIPerson execution.APIPerson
        	fmtfuncAPIPerson.ID = source.ID
        	fmtfuncAPIPerson.MiddleName = execution.SQLStringToPString(source.MiddleName)
        	if source.Name != *new(string) {
        		pString := source.Name
        		fmtfuncAPIPerson.FirstName = &pString
        	}
        	if source.Friends != nil {
        		fmtfuncAPIPerson.Friends = make([]execution.APIPerson, len(source.Friends))
        		for i := 0; i < len(source.Friends); i++ {
        			fmtfuncAPIPerson.Friends[i] = ConvertPerson(source.Friends[i])
        		}
        	}
        	fmtfuncAPIPerson.Info = fmtfuncInfoToFmtfuncInfo(source.Info)
        	return fmtfuncAPIPerson
        }
        func fmtfuncInfoToFmtfuncInfo(source execution.Info) execution.Info {
        	var fmtfuncInfo execution.Info
        	fmtfuncInfo.Birthplace = source.Birthplace
        	return fmtfuncInfo
        }
